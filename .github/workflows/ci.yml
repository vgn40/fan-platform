name: CI

on:
  push:
    branches:
      - main
      - prod
  pull_request:
    branches:
      - main
      - prod

jobs:
  # --- Python backend tests ------------------------------------
  backend:
    name: üêç Backend (Python) Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Cache Poetry & pip
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-interaction --no-ansi

      - name: Run backend tests
        working-directory: ./backend
        env:
          POETRY_CACHE_DIR: ~/.cache/pypoetry
        run: |
          poetry run pytest tests \
            --maxfail=1 \
            --disable-warnings \
            -q \
            --junitxml=tests/backend-test-results.xml \
            --cov=main \
            --cov-report xml:coverage.xml

      - name: Upload backend coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml

  # --- Node frontend tests & build -----------------------------
  frontend:
    name: ‚öõÔ∏è Frontend (React) Tests & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Cache npm
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run lint & tests
        working-directory: ./frontend
        run: |
          npm run lint
          npm test -- --coverage --coverageReporters=text-lcov --coverageDirectory=coverage

      - name: Upload frontend coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/lcov.info

      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build

      - name: Upload production build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
